worker_processes 1;

error_log logs/error.log;

events {
    worker_connections 1024;
}

env WAFCDN_API="127.0.0.1:8000";

http {
    access_log off;
    resolver 223.5.5.5 8.8.8.8;
    lua_package_path "$prefix/script/?.lua;;";

    # qps limit mem (key[ipv6:16b|ipv4 4b] val[4b]) 100,000,000/14
    lua_shared_dict limit_req 100M;

    # 正在缓存中的key
    lua_shared_dict cache_key 100M;

    lua_code_cache off; #开发调试

    init_by_lua_block {
        require("init")
    }

    upstream wafcdn_proxy_backend{
        server 0.0.0.1;
        balancer_by_lua_block {
            require("wafcdn_proxy").balancer()
        }
    }

    server {
        listen 80;

        # /@static
        # 如果用户直接访问会被重定向到 /rewrite/@static... 来处理 
        location /@static {
            set $wafcdn_static_root "";
            rewrite_by_lua_block {
                require("wafcdn_static").rewrite()
            }
            root $wafcdn_static_root;
        }

        # /@proxy
        # 如果用户直接访问会被重定向到 /rewrite/@proxy... 来处理 
        location /@proxy {
            set $wafcdn_proxy_server "";
            set $wafcdn_proxy_host $host;
            rewrite_by_lua_block {
                require("wafcdn_proxy").rewrite()
            }
            
            # - - - - - - - -
            # 反向代理主要配置
            # - - - - - - - -
            proxy_pass $wafcdn_proxy_server;
            proxy_set_header Host $wafcdn_proxy_host;
            
            # - - - - - - - -
            # keepalive 连接池
            # - - - - - - - -
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # - - - - - - - -
            # 对SSL后端进行兼容
            # - - - - - - - -
            proxy_ssl_server_name on;
            proxy_ssl_verify off;

            header_filter_by_lua_block {   
                require("wafcdn_proxy").header_filter()
            }

            body_filter_by_lua_block {
                require("wafcdn_proxy").body_filter()
            }

            log_by_lua_block {
                require("wafcdn_proxy").log()
            }
        }

        location / {
            set $wafcdn_site 0;
            set $wafcdn_static "";
            set $wafcdn_proxy "";
            set $wafcdn_header "";
            rewrite_by_lua_block {
                require("wafcdn").rewrite()
            }
        }
    }
}