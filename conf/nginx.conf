user root;
worker_processes auto;

events {
    worker_connections 1024;
}

env WAFCDN_API=http://127.0.0.1:8000; # 后台接口地址
env WAFCDN_DATA_DIR=./data; # 生成缓存文件的地址

http {
    gzip on;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 60;
    types_hash_max_size 4096;
    resolver 223.5.5.5 8.8.8.8;

    # 日志处理
    error_log logs/error.log warn;
    access_log off;

    # - - - - - - - - - - - - - - - - - - - -
    # - openresty锁与共享内存配置
    # - - - - - - - - - - - - - - - - - - - -
    lua_package_path "$prefix/script/?.lua;;";
    # 安全限制用来控制单IP请求次数
    lua_shared_dict limit_req 100M;
    # 缓存数据wafcdn主控数据
    lua_shared_dict request 10M;
    lua_shared_dict request_lock 1M;
    # lua_code_cache off; #开发调试
    init_by_lua_block {
        require("init")
        require("wafcdn")
    }
    upstream wafcdn_proxy_backend {
        server 0.0.0.1;
        balancer_by_lua_block {
            require("wafcdn_proxy").balancer()
        }
    }

    server {
        listen 80;
        listen 443 ssl;
        # 参考readme.md生成占位证书
        ssl_certificate certificate.crt;
        ssl_certificate_key private.key;
        ssl_certificate_by_lua_block {
            require("wafcdn").ssl()
        }

        # 处理默认的错误页面
        # 400 401 403 404 405  500 502 503 504
        error_page 502 = @error_502;
        location @error_502 {
            rewrite_by_lua_block {require("util").status(502, "DEFAULT_PAGE")}
        }

        # 申请ACME证书 - 跳过安全校验与日志
        location ^~ /.well-known/acme-challenge/ {
            default_type "text/plain";
            rewrite_by_lua_block {
                require("wafcdn").acme()
            }
        }

        # /@proxy 配置用户的反向代理
        location /@proxy {
            # 动态处理回源
            # http(s)://wafcdn_proxy_backend
            set $wafcdn_proxy_server "";
            set $wafcdn_proxy_host $host;
            rewrite_by_lua_block {
                require("wafcdn_proxy").rewrite()
            }
            header_filter_by_lua_block {
                require("wafcdn_proxy").header_filter()
            }
            body_filter_by_lua_block {
                require("wafcdn_proxy").body_filter()
            }
            log_by_lua_block {
                require("wafcdn_proxy").log()
            }
            # - - - - - - - -
            # 反向代理主要配置
            # - - - - - - - -
            proxy_pass $wafcdn_proxy_server;
            proxy_set_header Host $wafcdn_proxy_host;

            proxy_set_header X-Real-IP        $remote_addr;
            proxy_set_header X-Real-Port      $remote_port;
            proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Port $server_port;

            proxy_set_header Upgrade $http_upgrade;
            # - - - - - - - -
            # keepalive 连接池必须启用 proxy_http_version 无法lua控制
            # - - - - - - - -
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            # - - - - - - - -
            # 对SSL后端进行兼容
            # - - - - - - - -
            proxy_ssl_server_name on;
            proxy_ssl_verify off;
        }
        # /@alias返回实际文件
        location /@alias {
            # 配置文件的静态路径
            set $wafcdn_alias_file "";
            rewrite_by_lua_block {
                require("wafcdn_alias").rewrite()
            }
            header_filter_by_lua_block {
                require("wafcdn_alias").header_filter()
            }
            log_by_lua_block {
                require("wafcdn_alias").log()
            }
            alias $wafcdn_alias_file;
        }
        # 主路由
        location / {
            # 全局变量
            set $wafcdn_site 0; #网站标识
            set $wafcdn_header ""; #公共header配置
            set $wafcdn_proxy ""; #反向代理配置
            set $wafcdn_alias ""; #缓存命中文件配置
            rewrite_by_lua_block {
                require("wafcdn").rewrite()
            }
            header_filter_by_lua_block {
                require("wafcdn").header_filter()
            }
            log_by_lua_block {
                require("wafcdn").log()
            }
        }
    }
}