worker_processes 1;

error_log logs/error.log;

events {
    worker_connections 1024;
}



http {
    access_log off;
    resolver 223.5.5.5 223.6.6.6;
    lua_package_path "$prefix/script/?.lua;;";

    # -- 限制高频率请求
    lua_shared_dict limit_req 100M;
    
    
    lua_code_cache off; #开发调试

    init_by_lua_block {
        require("init")
    }
    
    upstream wafcdn_proxy_backend{
        server 0.0.0.1;
        balancer_by_lua_block {
            require("wafcdn").proxy_upstream()
        }
    }
    
    server {
        listen 80; 
        set $wafcdn_site 0;

        location /@wafcdn {
            internal;
            proxy_pass "http://127.0.0.1:8000";
            proxy_connect_timeout 3s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;
        }

        set $wafcdn_static "";
        location /@static {
            set $wafcdn_static_root "";
            access_by_lua_block {
                require("wafcdn").static_access()
            }
            root $wafcdn_static_root;
        }

        set $wafcdn_proxy "";
        location /@proxy {
            set $wafcdn_proxy_server "";
            set $wafcdn_proxy_host $host;
            access_by_lua_block {
                require("wafcdn").proxy_access()
            }
            proxy_pass $wafcdn_proxy_server;
            proxy_set_header Host $wafcdn_proxy_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Real-Port $remote_port;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        # 直接返回已缓存文件
        set $wafcdn_proxy_cache_file "";
        location /@proxy_cache {
            access_by_lua_block {
                require("wafcdn").proxy_access()
            }
            alias $wafcdn_proxy_cache_file;
            header_filter_by_lua_block {
                require("wafcdn").cachehead()
            }
        }


        location / {
            rewrite_by_lua_block {
                require("wafcdn").rewrite()
            }

            log_by_lua_block {
                require("wafcdn").log("localtin")
            }
        }
    }
}